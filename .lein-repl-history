(use 'beggers-neighbour.core)
(cards)
(deal)
(use 'beggers-neighbour.core)
(cards)
(player1)
(use 'beggers-neighbour.core)
(cards)
(player1)
(deal)
(use 'beggers-neighbour.core)
(cards)
(player1)
(deal cards)
(first cards)
(first (cards))
(deal (cards))
(use 'beggers-neighbour.core)
(deal)
(use 'beggers-neighbour.core)
(deal)
exitr
(use 'beggers-neighbour.core)
(deal)
(use 'beggers-neighbour.core)
(deal)
(use 'beggers-neighbour.core)
(deal)
(use 'beggers-neighbour.core)
(deal)
(use 'beggers-neighbour.core)
(deal)
(player1)
(player2)
(use 'beggers-neighbour.core)
(deal)
(use 'beggers-neighbour.core)
(deal)
(cards)
@player1
(player1)
(use 'beggers-neighbour.core)
(deal)
@player1
@player2
(remove 20 cards)
(swap! player1 pop)
(swap! player1 [])
(reset! player1)
(reset! player1 [])
(deal
)
@player1
@player2
(reset player1 [])
(reset! player1 [])
(reset! player2 [])
(deal)
@player1
@player2
(count player1)
(count @player1)
(use 'beggers-neighbour.core)
(deal)
@player1
(use 'beggers-neighbour.core)
(deal)
@player1
@player2
(count @player1)
(count @player2)
(pop player1)
(pop @player1)
@player1
(first @player1)
(last player1)
(last @player1)
(use 'beggers-neighbour.core)
(deal)
@player1
(play-p1)
@pile
(defn clear-all []
  (reset! player1 [])
  (reset! player2 [])
  (reset! pile []))
(clear-all)
@player1
@pile
(deal)
@player1
@player2
(give-p1 @player2)
(flatten @player1)
(use 'beggers-neighbour.core)
(deal)
(use 'beggers-neighbour.core)
(deal)
(game)
(mod 16 4)
(use 'beggers-neighbour.core)
(penalty 16)
(penalty 15)
(penalty 14)
(penalty 13)
(penalty 12)
(penalty 11)
(penalty 1)
(penalty 2)
(penalty 0)
(deal
)
(game)
@player1
(use 'clojure.stacktrace)
(game)
(e)
(use 'beggars-neighbour)
(use 'beggers-neighbour)
(use 'beggers-neighbour.core)
(deal)
(game)
(use 'beggers-neighbour.core)
(deal)
(game)
(use 'beggers-neighbour.core)
(deal)
(use 'beggers-neighbour.core)
(deal)
(game)
(use 'clojure.stacktrace)
(game)
(e)
(last @pile)
@player1
(last @player1)
@pile
(use 'beggers-neighbour.core)
(deal)
(game)
(give-p1 @player2)
(flatten @player1)
(use 'beggers-neighbour.core)
(deal)
(game)
(use 'clojure.stacktrace)
(game)
(e)
(clear-all)
(deal)
(game)
(e)
(use 'beggers-neighbour.core)
(deal)
(game)
(use 'clojure.stacktrace)
(e)
(use 'beggers-neighbour.core)
(deal)
(game)
(use 'clojure.stacktrace)
(e)
(use 'beggers-neighbour.core)
(deal)
(game)
(use 'beggers-neighbour.core)
(deal)
(game)
(use 'beggers-neighbour.core)
(deal)
(game)
(use 'beggers-neighbour.core)
(deal)
(game)
@pile
(flatten @pile)
(swap! flatten @pile)
(vec (flatten @pile))
@player1
@player2
(swap! shuffle @player1)
(swap! pile flatten)
(use 'beggers-neighbour.core)
(deal)
(swap! player1 shuffle)
(use 'beggers-neighbour.core)
(deal)
@player1
(game)
(clear-all)
(deal)
(game)
(use 'beggers-neighbour.core)
(game-loop 10)
(use 'clojure.stacktrace)
(e)
(use 'beggers-neighbour.core)
(game-loop 10)
(use 'beggers-neighbour.core)
(game-loop 10)
(e)
(game-loop 10)
(use 'clojure.stacktrace)
(e)
@player1
@player2
(clear-all)
(deal)
@player1
(rsep @player1)
(rseq @player1)
(reverse @player1)
@player1
(swap! player1 vec rseq)
(swap! player1 rseq)
(swap! player1 vec)
(use 'beggers-neighbour.core)
(deal)
(use 'clojure.stacktrace)
(e)
(use 'beggers-neighbour.core)
(deal)
@player1
@player
@player2
(give-p1 7)
(swap! player1 into 7)
(swap! player1 conj 7)
(swap! player1 into 7)
(use 'beggers-neighbour.core)
(deal)
(use 'clojure.stacktrace)
(e)
@player1
(cons @player1 7)
(cons 7 @player1)
@player1
(swap! player1 cons 7)
(swap! player1 7 cons)
(swap! player1 conj 7)
@player1
(swap! player1 (cons 7))
(swap! player1 (cons 7 player1))
(swap! player1 (cons 7 @player1))
(swap! player1 #(cons 7 %))
(use 'beggers-neighbour.core)
(deal)
(use 'beggers-neighbour.core)
(deal)
(use 'beggers-neighbour.core)
(deal)
(game)
(use 'clojure.stacktrace)
(e)
@player1
(swap! player1 vec)
@player1
(swap! player1 flatten)
(use 'beggers-neighbour.core)
(deal)
(game)
(use 'beggers-neighbour.core)
(game-loop 10)
(clear-all)
(deal)
(game)
@player1
@player2
(empty? @player1)
(empty? @player2)
(clear-all)
(deal)
(game)
(use 'clojure.stacktrace)
(e)
(use 'beggers-neighbour.core)
(game-loop 10)
@player1
(clear-all)
(deal)
(game)
(use 'beggers-neighbour.core)
(deal)
(game)
(use 'beggers-neighbour.core)
(deal)
(game)
(use 'beggers-neighbour.core)
(game-loop 10)
(use 'beggers-neighbour.core)
(game-loop 10)
(use 'beggers-neighbour.core)
(game-loop 1000)
turns
(use 'beggers-neighbour.core)
(game-loop 10)
(game-loop 1000)
(use 'beggers-neighbour.core)
(game-loop 10000)
(/ 194269 500)
